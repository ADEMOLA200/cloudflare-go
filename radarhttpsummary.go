// File generated from our OpenAPI spec by Stainless.

package cloudflare

import (
	"context"
	"net/http"
	"net/url"
	"time"

	"github.com/cloudflare/cloudflare-sdk-go/internal/apijson"
	"github.com/cloudflare/cloudflare-sdk-go/internal/apiquery"
	"github.com/cloudflare/cloudflare-sdk-go/internal/param"
	"github.com/cloudflare/cloudflare-sdk-go/internal/requestconfig"
	"github.com/cloudflare/cloudflare-sdk-go/option"
)

// RadarHTTPSummaryService contains methods and other services that help with
// interacting with the cloudflare API. Note, unlike clients, this service does not
// read variables from the environment automatically. You should not instantiate
// this service directly, and instead use the [NewRadarHTTPSummaryService] method
// instead.
type RadarHTTPSummaryService struct {
	Options []option.RequestOption
}

// NewRadarHTTPSummaryService generates a new service that applies the given
// options to each request. These options are applied after the parent client's
// options (if there is one), and before any request-specific options.
func NewRadarHTTPSummaryService(opts ...option.RequestOption) (r *RadarHTTPSummaryService) {
	r = &RadarHTTPSummaryService{}
	r.Options = opts
	return
}

// Percentage distribution of bot-generated traffic to genuine human traffic, as
// classified by Cloudflare. Visit
// https://developers.cloudflare.com/radar/concepts/bot-classes/ for more
// information.
func (r *RadarHTTPSummaryService) BotClass(ctx context.Context, query RadarHTTPSummaryBotClassParams, opts ...option.RequestOption) (res *RadarHTTPSummaryBotClassResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryBotClassResponseEnvelope
	path := "radar/http/summary/bot_class"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage of Internet traffic generated by mobile, desktop, and other types of
// devices, over a given time period.
func (r *RadarHTTPSummaryService) DeviceType(ctx context.Context, query RadarHTTPSummaryDeviceTypeParams, opts ...option.RequestOption) (res *RadarHTTPSummaryDeviceTypeResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryDeviceTypeResponseEnvelope
	path := "radar/http/summary/device_type"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage distribution of traffic per HTTP protocol over a given time period.
func (r *RadarHTTPSummaryService) HTTPProtocol(ctx context.Context, query RadarHTTPSummaryHTTPProtocolParams, opts ...option.RequestOption) (res *RadarHTTPSummaryHTTPProtocolResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryHTTPProtocolResponseEnvelope
	path := "radar/http/summary/http_protocol"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage distribution of traffic per HTTP protocol version over a given time
// period.
func (r *RadarHTTPSummaryService) HTTPVersion(ctx context.Context, query RadarHTTPSummaryHTTPVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryHTTPVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryHTTPVersionResponseEnvelope
	path := "radar/http/summary/http_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage distribution of Internet traffic based on IP protocol versions, such
// as IPv4 and IPv6, over a given time period.
func (r *RadarHTTPSummaryService) IPVersion(ctx context.Context, query RadarHTTPSummaryIPVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryIPVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryIPVersionResponseEnvelope
	path := "radar/http/summary/ip_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage distribution of Internet traffic generated by different operating
// systems like Windows, macOS, Android, iOS, and others, over a given time period.
func (r *RadarHTTPSummaryService) Os(ctx context.Context, query RadarHTTPSummaryOsParams, opts ...option.RequestOption) (res *RadarHTTPSummaryOsResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryOsResponseEnvelope
	path := "radar/http/summary/os"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

// Percentage distribution of traffic per TLS protocol version, over a given time
// period.
func (r *RadarHTTPSummaryService) TLSVersion(ctx context.Context, query RadarHTTPSummaryTLSVersionParams, opts ...option.RequestOption) (res *RadarHTTPSummaryTLSVersionResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env RadarHTTPSummaryTLSVersionResponseEnvelope
	path := "radar/http/summary/tls_version"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodGet, path, query, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

type RadarHTTPSummaryBotClassResponse struct {
	Meta     RadarHTTPSummaryBotClassResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryBotClassResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryBotClassResponseJSON     `json:"-"`
}

// radarHTTPSummaryBotClassResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryBotClassResponse]
type radarHTTPSummaryBotClassResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassResponseMeta struct {
	DateRange      []RadarHTTPSummaryBotClassResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                             `json:"lastUpdated,required"`
	Normalization  string                                             `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryBotClassResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryBotClassResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryBotClassResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryBotClassResponseMeta]
type radarHTTPSummaryBotClassResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                         `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryBotClassResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryBotClassResponseMetaDateRangeJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryBotClassResponseMetaDateRange]
type radarHTTPSummaryBotClassResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                          `json:"level"`
	JSON        radarHTTPSummaryBotClassResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryBotClassResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryBotClassResponseMetaConfidenceInfo]
type radarHTTPSummaryBotClassResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                           `json:"dataSource,required"`
	Description     string                                                           `json:"description,required"`
	EventType       string                                                           `json:"eventType,required"`
	IsInstantaneous interface{}                                                      `json:"isInstantaneous,required"`
	EndTime         time.Time                                                        `json:"endTime" format:"date-time"`
	LinkedURL       string                                                           `json:"linkedUrl"`
	StartTime       time.Time                                                        `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotationJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassResponseSummary0 struct {
	Bot   string                                       `json:"bot,required"`
	Human string                                       `json:"human,required"`
	JSON  radarHTTPSummaryBotClassResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryBotClassResponseSummary0JSON contains the JSON metadata for the
// struct [RadarHTTPSummaryBotClassResponseSummary0]
type radarHTTPSummaryBotClassResponseSummary0JSON struct {
	Bot         apijson.Field
	Human       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponse struct {
	Meta     RadarHTTPSummaryDeviceTypeResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryDeviceTypeResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryDeviceTypeResponseJSON     `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryDeviceTypeResponse]
type radarHTTPSummaryDeviceTypeResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponseMeta struct {
	DateRange      []RadarHTTPSummaryDeviceTypeResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                               `json:"lastUpdated,required"`
	Normalization  string                                               `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryDeviceTypeResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryDeviceTypeResponseMeta]
type radarHTTPSummaryDeviceTypeResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                           `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryDeviceTypeResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseMetaDateRangeJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryDeviceTypeResponseMetaDateRange]
type radarHTTPSummaryDeviceTypeResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                            `json:"level"`
	JSON        radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfo]
type radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                             `json:"dataSource,required"`
	Description     string                                                             `json:"description,required"`
	EventType       string                                                             `json:"eventType,required"`
	IsInstantaneous interface{}                                                        `json:"isInstantaneous,required"`
	EndTime         time.Time                                                          `json:"endTime" format:"date-time"`
	LinkedURL       string                                                             `json:"linkedUrl"`
	StartTime       time.Time                                                          `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotationJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeResponseSummary0 struct {
	Desktop string                                         `json:"desktop,required"`
	Mobile  string                                         `json:"mobile,required"`
	Other   string                                         `json:"other,required"`
	JSON    radarHTTPSummaryDeviceTypeResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseSummary0JSON contains the JSON metadata for
// the struct [RadarHTTPSummaryDeviceTypeResponseSummary0]
type radarHTTPSummaryDeviceTypeResponseSummary0JSON struct {
	Desktop     apijson.Field
	Mobile      apijson.Field
	Other       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponse struct {
	Meta     RadarHTTPSummaryHTTPProtocolResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryHTTPProtocolResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryHTTPProtocolResponseJSON     `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryHTTPProtocolResponse]
type radarHTTPSummaryHTTPProtocolResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponseMeta struct {
	DateRange      []RadarHTTPSummaryHTTPProtocolResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                                 `json:"lastUpdated,required"`
	Normalization  string                                                 `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryHTTPProtocolResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryHTTPProtocolResponseMeta]
type radarHTTPSummaryHTTPProtocolResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                             `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryHTTPProtocolResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseMetaDateRangeJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryHTTPProtocolResponseMetaDateRange]
type radarHTTPSummaryHTTPProtocolResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                              `json:"level"`
	JSON        radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfo]
type radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                               `json:"dataSource,required"`
	Description     string                                                               `json:"description,required"`
	EventType       string                                                               `json:"eventType,required"`
	IsInstantaneous interface{}                                                          `json:"isInstantaneous,required"`
	EndTime         time.Time                                                            `json:"endTime" format:"date-time"`
	LinkedURL       string                                                               `json:"linkedUrl"`
	StartTime       time.Time                                                            `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotationJSON contains
// the JSON metadata for the struct
// [RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolResponseSummary0 struct {
	HTTP  string                                           `json:"http,required"`
	HTTPS string                                           `json:"https,required"`
	JSON  radarHTTPSummaryHTTPProtocolResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseSummary0JSON contains the JSON metadata for
// the struct [RadarHTTPSummaryHTTPProtocolResponseSummary0]
type radarHTTPSummaryHTTPProtocolResponseSummary0JSON struct {
	HTTP        apijson.Field
	HTTPS       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponse struct {
	Meta     RadarHTTPSummaryHTTPVersionResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryHTTPVersionResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryHTTPVersionResponseJSON     `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryHTTPVersionResponse]
type radarHTTPSummaryHTTPVersionResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponseMeta struct {
	DateRange      []RadarHTTPSummaryHTTPVersionResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                                `json:"lastUpdated,required"`
	Normalization  string                                                `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryHTTPVersionResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryHTTPVersionResponseMeta]
type radarHTTPSummaryHTTPVersionResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                            `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryHTTPVersionResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseMetaDateRangeJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryHTTPVersionResponseMetaDateRange]
type radarHTTPSummaryHTTPVersionResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                             `json:"level"`
	JSON        radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfo]
type radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                              `json:"dataSource,required"`
	Description     string                                                              `json:"description,required"`
	EventType       string                                                              `json:"eventType,required"`
	IsInstantaneous interface{}                                                         `json:"isInstantaneous,required"`
	EndTime         time.Time                                                           `json:"endTime" format:"date-time"`
	LinkedURL       string                                                              `json:"linkedUrl"`
	StartTime       time.Time                                                           `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotationJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionResponseSummary0 struct {
	HTTP1X string                                          `json:"HTTP/1.x,required"`
	HTTP2  string                                          `json:"HTTP/2,required"`
	HTTP3  string                                          `json:"HTTP/3,required"`
	JSON   radarHTTPSummaryHTTPVersionResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseSummary0JSON contains the JSON metadata for
// the struct [RadarHTTPSummaryHTTPVersionResponseSummary0]
type radarHTTPSummaryHTTPVersionResponseSummary0JSON struct {
	HTTP1X      apijson.Field
	HTTP2       apijson.Field
	HTTP3       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponse struct {
	Meta     RadarHTTPSummaryIPVersionResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryIPVersionResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryIPVersionResponseJSON     `json:"-"`
}

// radarHTTPSummaryIPVersionResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryIPVersionResponse]
type radarHTTPSummaryIPVersionResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponseMeta struct {
	DateRange      []RadarHTTPSummaryIPVersionResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                              `json:"lastUpdated,required"`
	Normalization  string                                              `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryIPVersionResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryIPVersionResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryIPVersionResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryIPVersionResponseMeta]
type radarHTTPSummaryIPVersionResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                          `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryIPVersionResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryIPVersionResponseMetaDateRangeJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryIPVersionResponseMetaDateRange]
type radarHTTPSummaryIPVersionResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                           `json:"level"`
	JSON        radarHTTPSummaryIPVersionResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryIPVersionResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryIPVersionResponseMetaConfidenceInfo]
type radarHTTPSummaryIPVersionResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                            `json:"dataSource,required"`
	Description     string                                                            `json:"description,required"`
	EventType       string                                                            `json:"eventType,required"`
	IsInstantaneous interface{}                                                       `json:"isInstantaneous,required"`
	EndTime         time.Time                                                         `json:"endTime" format:"date-time"`
	LinkedURL       string                                                            `json:"linkedUrl"`
	StartTime       time.Time                                                         `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotationJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionResponseSummary0 struct {
	IPv4 string                                        `json:"IPv4,required"`
	IPv6 string                                        `json:"IPv6,required"`
	JSON radarHTTPSummaryIPVersionResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryIPVersionResponseSummary0JSON contains the JSON metadata for the
// struct [RadarHTTPSummaryIPVersionResponseSummary0]
type radarHTTPSummaryIPVersionResponseSummary0JSON struct {
	IPv4        apijson.Field
	IPv6        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponse struct {
	Meta     RadarHTTPSummaryOsResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryOsResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryOsResponseJSON     `json:"-"`
}

// radarHTTPSummaryOsResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryOsResponse]
type radarHTTPSummaryOsResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponseMeta struct {
	DateRange      []RadarHTTPSummaryOsResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                       `json:"lastUpdated,required"`
	Normalization  string                                       `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryOsResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryOsResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryOsResponseMetaJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryOsResponseMeta]
type radarHTTPSummaryOsResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                   `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryOsResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryOsResponseMetaDateRangeJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryOsResponseMetaDateRange]
type radarHTTPSummaryOsResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryOsResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                    `json:"level"`
	JSON        radarHTTPSummaryOsResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryOsResponseMetaConfidenceInfoJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryOsResponseMetaConfidenceInfo]
type radarHTTPSummaryOsResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                     `json:"dataSource,required"`
	Description     string                                                     `json:"description,required"`
	EventType       string                                                     `json:"eventType,required"`
	IsInstantaneous interface{}                                                `json:"isInstantaneous,required"`
	EndTime         time.Time                                                  `json:"endTime" format:"date-time"`
	LinkedURL       string                                                     `json:"linkedUrl"`
	StartTime       time.Time                                                  `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryOsResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryOsResponseMetaConfidenceInfoAnnotationJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryOsResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryOsResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsResponseSummary0 struct {
	Android string                                 `json:"ANDROID,required"`
	Ios     string                                 `json:"IOS,required"`
	JSON    radarHTTPSummaryOsResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryOsResponseSummary0JSON contains the JSON metadata for the struct
// [RadarHTTPSummaryOsResponseSummary0]
type radarHTTPSummaryOsResponseSummary0JSON struct {
	Android     apijson.Field
	Ios         apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponse struct {
	Meta     RadarHTTPSummaryTLSVersionResponseMeta     `json:"meta,required"`
	Summary0 RadarHTTPSummaryTLSVersionResponseSummary0 `json:"summary_0,required"`
	JSON     radarHTTPSummaryTLSVersionResponseJSON     `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryTLSVersionResponse]
type radarHTTPSummaryTLSVersionResponseJSON struct {
	Meta        apijson.Field
	Summary0    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponseMeta struct {
	DateRange      []RadarHTTPSummaryTLSVersionResponseMetaDateRange    `json:"dateRange,required"`
	LastUpdated    string                                               `json:"lastUpdated,required"`
	Normalization  string                                               `json:"normalization,required"`
	ConfidenceInfo RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfo `json:"confidenceInfo"`
	JSON           radarHTTPSummaryTLSVersionResponseMetaJSON           `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseMetaJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryTLSVersionResponseMeta]
type radarHTTPSummaryTLSVersionResponseMetaJSON struct {
	DateRange      apijson.Field
	LastUpdated    apijson.Field
	Normalization  apijson.Field
	ConfidenceInfo apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseMeta) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponseMetaDateRange struct {
	// Adjusted end of date range.
	EndTime time.Time `json:"endTime,required" format:"date-time"`
	// Adjusted start of date range.
	StartTime time.Time                                           `json:"startTime,required" format:"date-time"`
	JSON      radarHTTPSummaryTLSVersionResponseMetaDateRangeJSON `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseMetaDateRangeJSON contains the JSON metadata
// for the struct [RadarHTTPSummaryTLSVersionResponseMetaDateRange]
type radarHTTPSummaryTLSVersionResponseMetaDateRangeJSON struct {
	EndTime     apijson.Field
	StartTime   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseMetaDateRange) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfo struct {
	Annotations []RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotation `json:"annotations"`
	Level       int64                                                            `json:"level"`
	JSON        radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoJSON         `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoJSON contains the JSON
// metadata for the struct [RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfo]
type radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoJSON struct {
	Annotations apijson.Field
	Level       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfo) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotation struct {
	DataSource      string                                                             `json:"dataSource,required"`
	Description     string                                                             `json:"description,required"`
	EventType       string                                                             `json:"eventType,required"`
	IsInstantaneous interface{}                                                        `json:"isInstantaneous,required"`
	EndTime         time.Time                                                          `json:"endTime" format:"date-time"`
	LinkedURL       string                                                             `json:"linkedUrl"`
	StartTime       time.Time                                                          `json:"startTime" format:"date-time"`
	JSON            radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotationJSON `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotationJSON contains the
// JSON metadata for the struct
// [RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotation]
type radarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotationJSON struct {
	DataSource      apijson.Field
	Description     apijson.Field
	EventType       apijson.Field
	IsInstantaneous apijson.Field
	EndTime         apijson.Field
	LinkedURL       apijson.Field
	StartTime       apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseMetaConfidenceInfoAnnotation) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionResponseSummary0 struct {
	TLS1_0  string                                         `json:"TLS 1.0,required"`
	TLS1_1  string                                         `json:"TLS 1.1,required"`
	TLS1_2  string                                         `json:"TLS 1.2,required"`
	TLS1_3  string                                         `json:"TLS 1.3,required"`
	TLSQuic string                                         `json:"TLS QUIC,required"`
	JSON    radarHTTPSummaryTLSVersionResponseSummary0JSON `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseSummary0JSON contains the JSON metadata for
// the struct [RadarHTTPSummaryTLSVersionResponseSummary0]
type radarHTTPSummaryTLSVersionResponseSummary0JSON struct {
	TLS1_0      apijson.Field
	TLS1_1      apijson.Field
	TLS1_2      apijson.Field
	TLS1_3      apijson.Field
	TLSQuic     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseSummary0) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryBotClassParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryBotClassParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryBotClassParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryBotClassParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryBotClassParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryBotClassParamsHTTPVersion] `query:"httpVersion"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryBotClassParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryBotClassParamsO] `query:"os"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryBotClassParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryBotClassParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryBotClassParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryBotClassParamsDateRange string

const (
	RadarHTTPSummaryBotClassParamsDateRange1d         RadarHTTPSummaryBotClassParamsDateRange = "1d"
	RadarHTTPSummaryBotClassParamsDateRange2d         RadarHTTPSummaryBotClassParamsDateRange = "2d"
	RadarHTTPSummaryBotClassParamsDateRange7d         RadarHTTPSummaryBotClassParamsDateRange = "7d"
	RadarHTTPSummaryBotClassParamsDateRange14d        RadarHTTPSummaryBotClassParamsDateRange = "14d"
	RadarHTTPSummaryBotClassParamsDateRange28d        RadarHTTPSummaryBotClassParamsDateRange = "28d"
	RadarHTTPSummaryBotClassParamsDateRange12w        RadarHTTPSummaryBotClassParamsDateRange = "12w"
	RadarHTTPSummaryBotClassParamsDateRange24w        RadarHTTPSummaryBotClassParamsDateRange = "24w"
	RadarHTTPSummaryBotClassParamsDateRange52w        RadarHTTPSummaryBotClassParamsDateRange = "52w"
	RadarHTTPSummaryBotClassParamsDateRange1dControl  RadarHTTPSummaryBotClassParamsDateRange = "1dControl"
	RadarHTTPSummaryBotClassParamsDateRange2dControl  RadarHTTPSummaryBotClassParamsDateRange = "2dControl"
	RadarHTTPSummaryBotClassParamsDateRange7dControl  RadarHTTPSummaryBotClassParamsDateRange = "7dControl"
	RadarHTTPSummaryBotClassParamsDateRange14dControl RadarHTTPSummaryBotClassParamsDateRange = "14dControl"
	RadarHTTPSummaryBotClassParamsDateRange28dControl RadarHTTPSummaryBotClassParamsDateRange = "28dControl"
	RadarHTTPSummaryBotClassParamsDateRange12wControl RadarHTTPSummaryBotClassParamsDateRange = "12wControl"
	RadarHTTPSummaryBotClassParamsDateRange24wControl RadarHTTPSummaryBotClassParamsDateRange = "24wControl"
)

type RadarHTTPSummaryBotClassParamsDeviceType string

const (
	RadarHTTPSummaryBotClassParamsDeviceTypeDesktop RadarHTTPSummaryBotClassParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryBotClassParamsDeviceTypeMobile  RadarHTTPSummaryBotClassParamsDeviceType = "MOBILE"
	RadarHTTPSummaryBotClassParamsDeviceTypeOther   RadarHTTPSummaryBotClassParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryBotClassParamsFormat string

const (
	RadarHTTPSummaryBotClassParamsFormatJson RadarHTTPSummaryBotClassParamsFormat = "JSON"
	RadarHTTPSummaryBotClassParamsFormatCsv  RadarHTTPSummaryBotClassParamsFormat = "CSV"
)

type RadarHTTPSummaryBotClassParamsHTTPProtocol string

const (
	RadarHTTPSummaryBotClassParamsHTTPProtocolHTTP  RadarHTTPSummaryBotClassParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryBotClassParamsHTTPProtocolHTTPS RadarHTTPSummaryBotClassParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryBotClassParamsHTTPVersion string

const (
	RadarHTTPSummaryBotClassParamsHTTPVersionHttPv1 RadarHTTPSummaryBotClassParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryBotClassParamsHTTPVersionHttPv2 RadarHTTPSummaryBotClassParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryBotClassParamsHTTPVersionHttPv3 RadarHTTPSummaryBotClassParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryBotClassParamsIPVersion string

const (
	RadarHTTPSummaryBotClassParamsIPVersionIPv4 RadarHTTPSummaryBotClassParamsIPVersion = "IPv4"
	RadarHTTPSummaryBotClassParamsIPVersionIPv6 RadarHTTPSummaryBotClassParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryBotClassParamsO string

const (
	RadarHTTPSummaryBotClassParamsOWindows  RadarHTTPSummaryBotClassParamsO = "WINDOWS"
	RadarHTTPSummaryBotClassParamsOMacosx   RadarHTTPSummaryBotClassParamsO = "MACOSX"
	RadarHTTPSummaryBotClassParamsOIos      RadarHTTPSummaryBotClassParamsO = "IOS"
	RadarHTTPSummaryBotClassParamsOAndroid  RadarHTTPSummaryBotClassParamsO = "ANDROID"
	RadarHTTPSummaryBotClassParamsOChromeos RadarHTTPSummaryBotClassParamsO = "CHROMEOS"
	RadarHTTPSummaryBotClassParamsOLinux    RadarHTTPSummaryBotClassParamsO = "LINUX"
	RadarHTTPSummaryBotClassParamsOSmartTv  RadarHTTPSummaryBotClassParamsO = "SMART_TV"
)

type RadarHTTPSummaryBotClassParamsTLSVersion string

const (
	RadarHTTPSummaryBotClassParamsTLSVersionTlSv1_0  RadarHTTPSummaryBotClassParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryBotClassParamsTLSVersionTlSv1_1  RadarHTTPSummaryBotClassParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryBotClassParamsTLSVersionTlSv1_2  RadarHTTPSummaryBotClassParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryBotClassParamsTLSVersionTlSv1_3  RadarHTTPSummaryBotClassParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryBotClassParamsTLSVersionTlSvQuic RadarHTTPSummaryBotClassParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryBotClassResponseEnvelope struct {
	Result  RadarHTTPSummaryBotClassResponse             `json:"result,required"`
	Success bool                                         `json:"success,required"`
	JSON    radarHTTPSummaryBotClassResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryBotClassResponseEnvelopeJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryBotClassResponseEnvelope]
type radarHTTPSummaryBotClassResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryBotClassResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryDeviceTypeParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryDeviceTypeParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryDeviceTypeParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryDeviceTypeParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryDeviceTypeParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryDeviceTypeParamsHTTPVersion] `query:"httpVersion"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryDeviceTypeParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryDeviceTypeParamsO] `query:"os"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryDeviceTypeParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryDeviceTypeParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryDeviceTypeParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryDeviceTypeParamsBotClass string

const (
	RadarHTTPSummaryDeviceTypeParamsBotClassLikelyAutomated RadarHTTPSummaryDeviceTypeParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryDeviceTypeParamsBotClassLikelyHuman     RadarHTTPSummaryDeviceTypeParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryDeviceTypeParamsDateRange string

const (
	RadarHTTPSummaryDeviceTypeParamsDateRange1d         RadarHTTPSummaryDeviceTypeParamsDateRange = "1d"
	RadarHTTPSummaryDeviceTypeParamsDateRange2d         RadarHTTPSummaryDeviceTypeParamsDateRange = "2d"
	RadarHTTPSummaryDeviceTypeParamsDateRange7d         RadarHTTPSummaryDeviceTypeParamsDateRange = "7d"
	RadarHTTPSummaryDeviceTypeParamsDateRange14d        RadarHTTPSummaryDeviceTypeParamsDateRange = "14d"
	RadarHTTPSummaryDeviceTypeParamsDateRange28d        RadarHTTPSummaryDeviceTypeParamsDateRange = "28d"
	RadarHTTPSummaryDeviceTypeParamsDateRange12w        RadarHTTPSummaryDeviceTypeParamsDateRange = "12w"
	RadarHTTPSummaryDeviceTypeParamsDateRange24w        RadarHTTPSummaryDeviceTypeParamsDateRange = "24w"
	RadarHTTPSummaryDeviceTypeParamsDateRange52w        RadarHTTPSummaryDeviceTypeParamsDateRange = "52w"
	RadarHTTPSummaryDeviceTypeParamsDateRange1dControl  RadarHTTPSummaryDeviceTypeParamsDateRange = "1dControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange2dControl  RadarHTTPSummaryDeviceTypeParamsDateRange = "2dControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange7dControl  RadarHTTPSummaryDeviceTypeParamsDateRange = "7dControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange14dControl RadarHTTPSummaryDeviceTypeParamsDateRange = "14dControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange28dControl RadarHTTPSummaryDeviceTypeParamsDateRange = "28dControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange12wControl RadarHTTPSummaryDeviceTypeParamsDateRange = "12wControl"
	RadarHTTPSummaryDeviceTypeParamsDateRange24wControl RadarHTTPSummaryDeviceTypeParamsDateRange = "24wControl"
)

// Format results are returned in.
type RadarHTTPSummaryDeviceTypeParamsFormat string

const (
	RadarHTTPSummaryDeviceTypeParamsFormatJson RadarHTTPSummaryDeviceTypeParamsFormat = "JSON"
	RadarHTTPSummaryDeviceTypeParamsFormatCsv  RadarHTTPSummaryDeviceTypeParamsFormat = "CSV"
)

type RadarHTTPSummaryDeviceTypeParamsHTTPProtocol string

const (
	RadarHTTPSummaryDeviceTypeParamsHTTPProtocolHTTP  RadarHTTPSummaryDeviceTypeParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryDeviceTypeParamsHTTPProtocolHTTPS RadarHTTPSummaryDeviceTypeParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryDeviceTypeParamsHTTPVersion string

const (
	RadarHTTPSummaryDeviceTypeParamsHTTPVersionHttPv1 RadarHTTPSummaryDeviceTypeParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryDeviceTypeParamsHTTPVersionHttPv2 RadarHTTPSummaryDeviceTypeParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryDeviceTypeParamsHTTPVersionHttPv3 RadarHTTPSummaryDeviceTypeParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryDeviceTypeParamsIPVersion string

const (
	RadarHTTPSummaryDeviceTypeParamsIPVersionIPv4 RadarHTTPSummaryDeviceTypeParamsIPVersion = "IPv4"
	RadarHTTPSummaryDeviceTypeParamsIPVersionIPv6 RadarHTTPSummaryDeviceTypeParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryDeviceTypeParamsO string

const (
	RadarHTTPSummaryDeviceTypeParamsOWindows  RadarHTTPSummaryDeviceTypeParamsO = "WINDOWS"
	RadarHTTPSummaryDeviceTypeParamsOMacosx   RadarHTTPSummaryDeviceTypeParamsO = "MACOSX"
	RadarHTTPSummaryDeviceTypeParamsOIos      RadarHTTPSummaryDeviceTypeParamsO = "IOS"
	RadarHTTPSummaryDeviceTypeParamsOAndroid  RadarHTTPSummaryDeviceTypeParamsO = "ANDROID"
	RadarHTTPSummaryDeviceTypeParamsOChromeos RadarHTTPSummaryDeviceTypeParamsO = "CHROMEOS"
	RadarHTTPSummaryDeviceTypeParamsOLinux    RadarHTTPSummaryDeviceTypeParamsO = "LINUX"
	RadarHTTPSummaryDeviceTypeParamsOSmartTv  RadarHTTPSummaryDeviceTypeParamsO = "SMART_TV"
)

type RadarHTTPSummaryDeviceTypeParamsTLSVersion string

const (
	RadarHTTPSummaryDeviceTypeParamsTLSVersionTlSv1_0  RadarHTTPSummaryDeviceTypeParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryDeviceTypeParamsTLSVersionTlSv1_1  RadarHTTPSummaryDeviceTypeParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryDeviceTypeParamsTLSVersionTlSv1_2  RadarHTTPSummaryDeviceTypeParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryDeviceTypeParamsTLSVersionTlSv1_3  RadarHTTPSummaryDeviceTypeParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryDeviceTypeParamsTLSVersionTlSvQuic RadarHTTPSummaryDeviceTypeParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryDeviceTypeResponseEnvelope struct {
	Result  RadarHTTPSummaryDeviceTypeResponse             `json:"result,required"`
	Success bool                                           `json:"success,required"`
	JSON    radarHTTPSummaryDeviceTypeResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryDeviceTypeResponseEnvelopeJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryDeviceTypeResponseEnvelope]
type radarHTTPSummaryDeviceTypeResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryDeviceTypeResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPProtocolParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryHTTPProtocolParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryHTTPProtocolParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryHTTPProtocolParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryHTTPProtocolParamsFormat] `query:"format"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryHTTPProtocolParamsHTTPVersion] `query:"httpVersion"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryHTTPProtocolParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryHTTPProtocolParamsO] `query:"os"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryHTTPProtocolParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryHTTPProtocolParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryHTTPProtocolParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryHTTPProtocolParamsBotClass string

const (
	RadarHTTPSummaryHTTPProtocolParamsBotClassLikelyAutomated RadarHTTPSummaryHTTPProtocolParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryHTTPProtocolParamsBotClassLikelyHuman     RadarHTTPSummaryHTTPProtocolParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryHTTPProtocolParamsDateRange string

const (
	RadarHTTPSummaryHTTPProtocolParamsDateRange1d         RadarHTTPSummaryHTTPProtocolParamsDateRange = "1d"
	RadarHTTPSummaryHTTPProtocolParamsDateRange2d         RadarHTTPSummaryHTTPProtocolParamsDateRange = "2d"
	RadarHTTPSummaryHTTPProtocolParamsDateRange7d         RadarHTTPSummaryHTTPProtocolParamsDateRange = "7d"
	RadarHTTPSummaryHTTPProtocolParamsDateRange14d        RadarHTTPSummaryHTTPProtocolParamsDateRange = "14d"
	RadarHTTPSummaryHTTPProtocolParamsDateRange28d        RadarHTTPSummaryHTTPProtocolParamsDateRange = "28d"
	RadarHTTPSummaryHTTPProtocolParamsDateRange12w        RadarHTTPSummaryHTTPProtocolParamsDateRange = "12w"
	RadarHTTPSummaryHTTPProtocolParamsDateRange24w        RadarHTTPSummaryHTTPProtocolParamsDateRange = "24w"
	RadarHTTPSummaryHTTPProtocolParamsDateRange52w        RadarHTTPSummaryHTTPProtocolParamsDateRange = "52w"
	RadarHTTPSummaryHTTPProtocolParamsDateRange1dControl  RadarHTTPSummaryHTTPProtocolParamsDateRange = "1dControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange2dControl  RadarHTTPSummaryHTTPProtocolParamsDateRange = "2dControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange7dControl  RadarHTTPSummaryHTTPProtocolParamsDateRange = "7dControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange14dControl RadarHTTPSummaryHTTPProtocolParamsDateRange = "14dControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange28dControl RadarHTTPSummaryHTTPProtocolParamsDateRange = "28dControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange12wControl RadarHTTPSummaryHTTPProtocolParamsDateRange = "12wControl"
	RadarHTTPSummaryHTTPProtocolParamsDateRange24wControl RadarHTTPSummaryHTTPProtocolParamsDateRange = "24wControl"
)

type RadarHTTPSummaryHTTPProtocolParamsDeviceType string

const (
	RadarHTTPSummaryHTTPProtocolParamsDeviceTypeDesktop RadarHTTPSummaryHTTPProtocolParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryHTTPProtocolParamsDeviceTypeMobile  RadarHTTPSummaryHTTPProtocolParamsDeviceType = "MOBILE"
	RadarHTTPSummaryHTTPProtocolParamsDeviceTypeOther   RadarHTTPSummaryHTTPProtocolParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryHTTPProtocolParamsFormat string

const (
	RadarHTTPSummaryHTTPProtocolParamsFormatJson RadarHTTPSummaryHTTPProtocolParamsFormat = "JSON"
	RadarHTTPSummaryHTTPProtocolParamsFormatCsv  RadarHTTPSummaryHTTPProtocolParamsFormat = "CSV"
)

type RadarHTTPSummaryHTTPProtocolParamsHTTPVersion string

const (
	RadarHTTPSummaryHTTPProtocolParamsHTTPVersionHttPv1 RadarHTTPSummaryHTTPProtocolParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryHTTPProtocolParamsHTTPVersionHttPv2 RadarHTTPSummaryHTTPProtocolParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryHTTPProtocolParamsHTTPVersionHttPv3 RadarHTTPSummaryHTTPProtocolParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryHTTPProtocolParamsIPVersion string

const (
	RadarHTTPSummaryHTTPProtocolParamsIPVersionIPv4 RadarHTTPSummaryHTTPProtocolParamsIPVersion = "IPv4"
	RadarHTTPSummaryHTTPProtocolParamsIPVersionIPv6 RadarHTTPSummaryHTTPProtocolParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryHTTPProtocolParamsO string

const (
	RadarHTTPSummaryHTTPProtocolParamsOWindows  RadarHTTPSummaryHTTPProtocolParamsO = "WINDOWS"
	RadarHTTPSummaryHTTPProtocolParamsOMacosx   RadarHTTPSummaryHTTPProtocolParamsO = "MACOSX"
	RadarHTTPSummaryHTTPProtocolParamsOIos      RadarHTTPSummaryHTTPProtocolParamsO = "IOS"
	RadarHTTPSummaryHTTPProtocolParamsOAndroid  RadarHTTPSummaryHTTPProtocolParamsO = "ANDROID"
	RadarHTTPSummaryHTTPProtocolParamsOChromeos RadarHTTPSummaryHTTPProtocolParamsO = "CHROMEOS"
	RadarHTTPSummaryHTTPProtocolParamsOLinux    RadarHTTPSummaryHTTPProtocolParamsO = "LINUX"
	RadarHTTPSummaryHTTPProtocolParamsOSmartTv  RadarHTTPSummaryHTTPProtocolParamsO = "SMART_TV"
)

type RadarHTTPSummaryHTTPProtocolParamsTLSVersion string

const (
	RadarHTTPSummaryHTTPProtocolParamsTLSVersionTlSv1_0  RadarHTTPSummaryHTTPProtocolParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryHTTPProtocolParamsTLSVersionTlSv1_1  RadarHTTPSummaryHTTPProtocolParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryHTTPProtocolParamsTLSVersionTlSv1_2  RadarHTTPSummaryHTTPProtocolParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryHTTPProtocolParamsTLSVersionTlSv1_3  RadarHTTPSummaryHTTPProtocolParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryHTTPProtocolParamsTLSVersionTlSvQuic RadarHTTPSummaryHTTPProtocolParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryHTTPProtocolResponseEnvelope struct {
	Result  RadarHTTPSummaryHTTPProtocolResponse             `json:"result,required"`
	Success bool                                             `json:"success,required"`
	JSON    radarHTTPSummaryHTTPProtocolResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryHTTPProtocolResponseEnvelopeJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryHTTPProtocolResponseEnvelope]
type radarHTTPSummaryHTTPProtocolResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPProtocolResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryHTTPVersionParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryHTTPVersionParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryHTTPVersionParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryHTTPVersionParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryHTTPVersionParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryHTTPVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryHTTPVersionParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryHTTPVersionParamsO] `query:"os"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryHTTPVersionParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryHTTPVersionParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryHTTPVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryHTTPVersionParamsBotClass string

const (
	RadarHTTPSummaryHTTPVersionParamsBotClassLikelyAutomated RadarHTTPSummaryHTTPVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryHTTPVersionParamsBotClassLikelyHuman     RadarHTTPSummaryHTTPVersionParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryHTTPVersionParamsDateRange string

const (
	RadarHTTPSummaryHTTPVersionParamsDateRange1d         RadarHTTPSummaryHTTPVersionParamsDateRange = "1d"
	RadarHTTPSummaryHTTPVersionParamsDateRange2d         RadarHTTPSummaryHTTPVersionParamsDateRange = "2d"
	RadarHTTPSummaryHTTPVersionParamsDateRange7d         RadarHTTPSummaryHTTPVersionParamsDateRange = "7d"
	RadarHTTPSummaryHTTPVersionParamsDateRange14d        RadarHTTPSummaryHTTPVersionParamsDateRange = "14d"
	RadarHTTPSummaryHTTPVersionParamsDateRange28d        RadarHTTPSummaryHTTPVersionParamsDateRange = "28d"
	RadarHTTPSummaryHTTPVersionParamsDateRange12w        RadarHTTPSummaryHTTPVersionParamsDateRange = "12w"
	RadarHTTPSummaryHTTPVersionParamsDateRange24w        RadarHTTPSummaryHTTPVersionParamsDateRange = "24w"
	RadarHTTPSummaryHTTPVersionParamsDateRange52w        RadarHTTPSummaryHTTPVersionParamsDateRange = "52w"
	RadarHTTPSummaryHTTPVersionParamsDateRange1dControl  RadarHTTPSummaryHTTPVersionParamsDateRange = "1dControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange2dControl  RadarHTTPSummaryHTTPVersionParamsDateRange = "2dControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange7dControl  RadarHTTPSummaryHTTPVersionParamsDateRange = "7dControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange14dControl RadarHTTPSummaryHTTPVersionParamsDateRange = "14dControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange28dControl RadarHTTPSummaryHTTPVersionParamsDateRange = "28dControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange12wControl RadarHTTPSummaryHTTPVersionParamsDateRange = "12wControl"
	RadarHTTPSummaryHTTPVersionParamsDateRange24wControl RadarHTTPSummaryHTTPVersionParamsDateRange = "24wControl"
)

type RadarHTTPSummaryHTTPVersionParamsDeviceType string

const (
	RadarHTTPSummaryHTTPVersionParamsDeviceTypeDesktop RadarHTTPSummaryHTTPVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryHTTPVersionParamsDeviceTypeMobile  RadarHTTPSummaryHTTPVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryHTTPVersionParamsDeviceTypeOther   RadarHTTPSummaryHTTPVersionParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryHTTPVersionParamsFormat string

const (
	RadarHTTPSummaryHTTPVersionParamsFormatJson RadarHTTPSummaryHTTPVersionParamsFormat = "JSON"
	RadarHTTPSummaryHTTPVersionParamsFormatCsv  RadarHTTPSummaryHTTPVersionParamsFormat = "CSV"
)

type RadarHTTPSummaryHTTPVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryHTTPVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryHTTPVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryHTTPVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryHTTPVersionParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryHTTPVersionParamsIPVersion string

const (
	RadarHTTPSummaryHTTPVersionParamsIPVersionIPv4 RadarHTTPSummaryHTTPVersionParamsIPVersion = "IPv4"
	RadarHTTPSummaryHTTPVersionParamsIPVersionIPv6 RadarHTTPSummaryHTTPVersionParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryHTTPVersionParamsO string

const (
	RadarHTTPSummaryHTTPVersionParamsOWindows  RadarHTTPSummaryHTTPVersionParamsO = "WINDOWS"
	RadarHTTPSummaryHTTPVersionParamsOMacosx   RadarHTTPSummaryHTTPVersionParamsO = "MACOSX"
	RadarHTTPSummaryHTTPVersionParamsOIos      RadarHTTPSummaryHTTPVersionParamsO = "IOS"
	RadarHTTPSummaryHTTPVersionParamsOAndroid  RadarHTTPSummaryHTTPVersionParamsO = "ANDROID"
	RadarHTTPSummaryHTTPVersionParamsOChromeos RadarHTTPSummaryHTTPVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryHTTPVersionParamsOLinux    RadarHTTPSummaryHTTPVersionParamsO = "LINUX"
	RadarHTTPSummaryHTTPVersionParamsOSmartTv  RadarHTTPSummaryHTTPVersionParamsO = "SMART_TV"
)

type RadarHTTPSummaryHTTPVersionParamsTLSVersion string

const (
	RadarHTTPSummaryHTTPVersionParamsTLSVersionTlSv1_0  RadarHTTPSummaryHTTPVersionParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryHTTPVersionParamsTLSVersionTlSv1_1  RadarHTTPSummaryHTTPVersionParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryHTTPVersionParamsTLSVersionTlSv1_2  RadarHTTPSummaryHTTPVersionParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryHTTPVersionParamsTLSVersionTlSv1_3  RadarHTTPSummaryHTTPVersionParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryHTTPVersionParamsTLSVersionTlSvQuic RadarHTTPSummaryHTTPVersionParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryHTTPVersionResponseEnvelope struct {
	Result  RadarHTTPSummaryHTTPVersionResponse             `json:"result,required"`
	Success bool                                            `json:"success,required"`
	JSON    radarHTTPSummaryHTTPVersionResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryHTTPVersionResponseEnvelopeJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryHTTPVersionResponseEnvelope]
type radarHTTPSummaryHTTPVersionResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryHTTPVersionResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryIPVersionParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryIPVersionParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryIPVersionParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryIPVersionParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryIPVersionParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryIPVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryIPVersionParamsHTTPVersion] `query:"httpVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryIPVersionParamsO] `query:"os"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryIPVersionParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryIPVersionParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryIPVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryIPVersionParamsBotClass string

const (
	RadarHTTPSummaryIPVersionParamsBotClassLikelyAutomated RadarHTTPSummaryIPVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryIPVersionParamsBotClassLikelyHuman     RadarHTTPSummaryIPVersionParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryIPVersionParamsDateRange string

const (
	RadarHTTPSummaryIPVersionParamsDateRange1d         RadarHTTPSummaryIPVersionParamsDateRange = "1d"
	RadarHTTPSummaryIPVersionParamsDateRange2d         RadarHTTPSummaryIPVersionParamsDateRange = "2d"
	RadarHTTPSummaryIPVersionParamsDateRange7d         RadarHTTPSummaryIPVersionParamsDateRange = "7d"
	RadarHTTPSummaryIPVersionParamsDateRange14d        RadarHTTPSummaryIPVersionParamsDateRange = "14d"
	RadarHTTPSummaryIPVersionParamsDateRange28d        RadarHTTPSummaryIPVersionParamsDateRange = "28d"
	RadarHTTPSummaryIPVersionParamsDateRange12w        RadarHTTPSummaryIPVersionParamsDateRange = "12w"
	RadarHTTPSummaryIPVersionParamsDateRange24w        RadarHTTPSummaryIPVersionParamsDateRange = "24w"
	RadarHTTPSummaryIPVersionParamsDateRange52w        RadarHTTPSummaryIPVersionParamsDateRange = "52w"
	RadarHTTPSummaryIPVersionParamsDateRange1dControl  RadarHTTPSummaryIPVersionParamsDateRange = "1dControl"
	RadarHTTPSummaryIPVersionParamsDateRange2dControl  RadarHTTPSummaryIPVersionParamsDateRange = "2dControl"
	RadarHTTPSummaryIPVersionParamsDateRange7dControl  RadarHTTPSummaryIPVersionParamsDateRange = "7dControl"
	RadarHTTPSummaryIPVersionParamsDateRange14dControl RadarHTTPSummaryIPVersionParamsDateRange = "14dControl"
	RadarHTTPSummaryIPVersionParamsDateRange28dControl RadarHTTPSummaryIPVersionParamsDateRange = "28dControl"
	RadarHTTPSummaryIPVersionParamsDateRange12wControl RadarHTTPSummaryIPVersionParamsDateRange = "12wControl"
	RadarHTTPSummaryIPVersionParamsDateRange24wControl RadarHTTPSummaryIPVersionParamsDateRange = "24wControl"
)

type RadarHTTPSummaryIPVersionParamsDeviceType string

const (
	RadarHTTPSummaryIPVersionParamsDeviceTypeDesktop RadarHTTPSummaryIPVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryIPVersionParamsDeviceTypeMobile  RadarHTTPSummaryIPVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryIPVersionParamsDeviceTypeOther   RadarHTTPSummaryIPVersionParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryIPVersionParamsFormat string

const (
	RadarHTTPSummaryIPVersionParamsFormatJson RadarHTTPSummaryIPVersionParamsFormat = "JSON"
	RadarHTTPSummaryIPVersionParamsFormatCsv  RadarHTTPSummaryIPVersionParamsFormat = "CSV"
)

type RadarHTTPSummaryIPVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryIPVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryIPVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryIPVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryIPVersionParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryIPVersionParamsHTTPVersion string

const (
	RadarHTTPSummaryIPVersionParamsHTTPVersionHttPv1 RadarHTTPSummaryIPVersionParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryIPVersionParamsHTTPVersionHttPv2 RadarHTTPSummaryIPVersionParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryIPVersionParamsHTTPVersionHttPv3 RadarHTTPSummaryIPVersionParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryIPVersionParamsO string

const (
	RadarHTTPSummaryIPVersionParamsOWindows  RadarHTTPSummaryIPVersionParamsO = "WINDOWS"
	RadarHTTPSummaryIPVersionParamsOMacosx   RadarHTTPSummaryIPVersionParamsO = "MACOSX"
	RadarHTTPSummaryIPVersionParamsOIos      RadarHTTPSummaryIPVersionParamsO = "IOS"
	RadarHTTPSummaryIPVersionParamsOAndroid  RadarHTTPSummaryIPVersionParamsO = "ANDROID"
	RadarHTTPSummaryIPVersionParamsOChromeos RadarHTTPSummaryIPVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryIPVersionParamsOLinux    RadarHTTPSummaryIPVersionParamsO = "LINUX"
	RadarHTTPSummaryIPVersionParamsOSmartTv  RadarHTTPSummaryIPVersionParamsO = "SMART_TV"
)

type RadarHTTPSummaryIPVersionParamsTLSVersion string

const (
	RadarHTTPSummaryIPVersionParamsTLSVersionTlSv1_0  RadarHTTPSummaryIPVersionParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryIPVersionParamsTLSVersionTlSv1_1  RadarHTTPSummaryIPVersionParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryIPVersionParamsTLSVersionTlSv1_2  RadarHTTPSummaryIPVersionParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryIPVersionParamsTLSVersionTlSv1_3  RadarHTTPSummaryIPVersionParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryIPVersionParamsTLSVersionTlSvQuic RadarHTTPSummaryIPVersionParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryIPVersionResponseEnvelope struct {
	Result  RadarHTTPSummaryIPVersionResponse             `json:"result,required"`
	Success bool                                          `json:"success,required"`
	JSON    radarHTTPSummaryIPVersionResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryIPVersionResponseEnvelopeJSON contains the JSON metadata for the
// struct [RadarHTTPSummaryIPVersionResponseEnvelope]
type radarHTTPSummaryIPVersionResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryIPVersionResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryOsParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryOsParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryOsParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryOsParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryOsParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryOsParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryOsParamsHTTPVersion] `query:"httpVersion"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryOsParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for tls version.
	TLSVersion param.Field[[]RadarHTTPSummaryOsParamsTLSVersion] `query:"tlsVersion"`
}

// URLQuery serializes [RadarHTTPSummaryOsParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryOsParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryOsParamsBotClass string

const (
	RadarHTTPSummaryOsParamsBotClassLikelyAutomated RadarHTTPSummaryOsParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryOsParamsBotClassLikelyHuman     RadarHTTPSummaryOsParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryOsParamsDateRange string

const (
	RadarHTTPSummaryOsParamsDateRange1d         RadarHTTPSummaryOsParamsDateRange = "1d"
	RadarHTTPSummaryOsParamsDateRange2d         RadarHTTPSummaryOsParamsDateRange = "2d"
	RadarHTTPSummaryOsParamsDateRange7d         RadarHTTPSummaryOsParamsDateRange = "7d"
	RadarHTTPSummaryOsParamsDateRange14d        RadarHTTPSummaryOsParamsDateRange = "14d"
	RadarHTTPSummaryOsParamsDateRange28d        RadarHTTPSummaryOsParamsDateRange = "28d"
	RadarHTTPSummaryOsParamsDateRange12w        RadarHTTPSummaryOsParamsDateRange = "12w"
	RadarHTTPSummaryOsParamsDateRange24w        RadarHTTPSummaryOsParamsDateRange = "24w"
	RadarHTTPSummaryOsParamsDateRange52w        RadarHTTPSummaryOsParamsDateRange = "52w"
	RadarHTTPSummaryOsParamsDateRange1dControl  RadarHTTPSummaryOsParamsDateRange = "1dControl"
	RadarHTTPSummaryOsParamsDateRange2dControl  RadarHTTPSummaryOsParamsDateRange = "2dControl"
	RadarHTTPSummaryOsParamsDateRange7dControl  RadarHTTPSummaryOsParamsDateRange = "7dControl"
	RadarHTTPSummaryOsParamsDateRange14dControl RadarHTTPSummaryOsParamsDateRange = "14dControl"
	RadarHTTPSummaryOsParamsDateRange28dControl RadarHTTPSummaryOsParamsDateRange = "28dControl"
	RadarHTTPSummaryOsParamsDateRange12wControl RadarHTTPSummaryOsParamsDateRange = "12wControl"
	RadarHTTPSummaryOsParamsDateRange24wControl RadarHTTPSummaryOsParamsDateRange = "24wControl"
)

type RadarHTTPSummaryOsParamsDeviceType string

const (
	RadarHTTPSummaryOsParamsDeviceTypeDesktop RadarHTTPSummaryOsParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryOsParamsDeviceTypeMobile  RadarHTTPSummaryOsParamsDeviceType = "MOBILE"
	RadarHTTPSummaryOsParamsDeviceTypeOther   RadarHTTPSummaryOsParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryOsParamsFormat string

const (
	RadarHTTPSummaryOsParamsFormatJson RadarHTTPSummaryOsParamsFormat = "JSON"
	RadarHTTPSummaryOsParamsFormatCsv  RadarHTTPSummaryOsParamsFormat = "CSV"
)

type RadarHTTPSummaryOsParamsHTTPProtocol string

const (
	RadarHTTPSummaryOsParamsHTTPProtocolHTTP  RadarHTTPSummaryOsParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryOsParamsHTTPProtocolHTTPS RadarHTTPSummaryOsParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryOsParamsHTTPVersion string

const (
	RadarHTTPSummaryOsParamsHTTPVersionHttPv1 RadarHTTPSummaryOsParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryOsParamsHTTPVersionHttPv2 RadarHTTPSummaryOsParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryOsParamsHTTPVersionHttPv3 RadarHTTPSummaryOsParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryOsParamsIPVersion string

const (
	RadarHTTPSummaryOsParamsIPVersionIPv4 RadarHTTPSummaryOsParamsIPVersion = "IPv4"
	RadarHTTPSummaryOsParamsIPVersionIPv6 RadarHTTPSummaryOsParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryOsParamsTLSVersion string

const (
	RadarHTTPSummaryOsParamsTLSVersionTlSv1_0  RadarHTTPSummaryOsParamsTLSVersion = "TLSv1_0"
	RadarHTTPSummaryOsParamsTLSVersionTlSv1_1  RadarHTTPSummaryOsParamsTLSVersion = "TLSv1_1"
	RadarHTTPSummaryOsParamsTLSVersionTlSv1_2  RadarHTTPSummaryOsParamsTLSVersion = "TLSv1_2"
	RadarHTTPSummaryOsParamsTLSVersionTlSv1_3  RadarHTTPSummaryOsParamsTLSVersion = "TLSv1_3"
	RadarHTTPSummaryOsParamsTLSVersionTlSvQuic RadarHTTPSummaryOsParamsTLSVersion = "TLSvQUIC"
)

type RadarHTTPSummaryOsResponseEnvelope struct {
	Result  RadarHTTPSummaryOsResponse             `json:"result,required"`
	Success bool                                   `json:"success,required"`
	JSON    radarHTTPSummaryOsResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryOsResponseEnvelopeJSON contains the JSON metadata for the struct
// [RadarHTTPSummaryOsResponseEnvelope]
type radarHTTPSummaryOsResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryOsResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type RadarHTTPSummaryTLSVersionParams struct {
	// Array of comma separated list of ASNs, start with `-` to exclude from results.
	// For example, `-174, 3356` excludes results from AS174, but includes results from
	// AS3356.
	Asn param.Field[[]string] `query:"asn"`
	// Filter for bot class. Refer to
	// [Bot classes](https://developers.cloudflare.com/radar/concepts/bot-classes/).
	BotClass param.Field[[]RadarHTTPSummaryTLSVersionParamsBotClass] `query:"botClass"`
	// End of the date range (inclusive).
	DateEnd param.Field[[]time.Time] `query:"dateEnd" format:"date-time"`
	// For example, use `7d` and `7dControl` to compare this week with the previous
	// week. Use this parameter or set specific start and end dates (`dateStart` and
	// `dateEnd` parameters).
	DateRange param.Field[[]RadarHTTPSummaryTLSVersionParamsDateRange] `query:"dateRange"`
	// Array of datetimes to filter the start of a series.
	DateStart param.Field[[]time.Time] `query:"dateStart" format:"date-time"`
	// Filter for device type.
	DeviceType param.Field[[]RadarHTTPSummaryTLSVersionParamsDeviceType] `query:"deviceType"`
	// Format results are returned in.
	Format param.Field[RadarHTTPSummaryTLSVersionParamsFormat] `query:"format"`
	// Filter for http protocol.
	HTTPProtocol param.Field[[]RadarHTTPSummaryTLSVersionParamsHTTPProtocol] `query:"httpProtocol"`
	// Filter for http version.
	HTTPVersion param.Field[[]RadarHTTPSummaryTLSVersionParamsHTTPVersion] `query:"httpVersion"`
	// Filter for ip version.
	IPVersion param.Field[[]RadarHTTPSummaryTLSVersionParamsIPVersion] `query:"ipVersion"`
	// Array of comma separated list of locations (alpha-2 country codes). Start with
	// `-` to exclude from results. For example, `-US,PT` excludes results from the US,
	// but includes results from PT.
	Location param.Field[[]string] `query:"location"`
	// Array of names that will be used to name the series in responses.
	Name param.Field[[]string] `query:"name"`
	// Filter for os name.
	Os param.Field[[]RadarHTTPSummaryTLSVersionParamsO] `query:"os"`
}

// URLQuery serializes [RadarHTTPSummaryTLSVersionParams]'s query parameters as
// `url.Values`.
func (r RadarHTTPSummaryTLSVersionParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type RadarHTTPSummaryTLSVersionParamsBotClass string

const (
	RadarHTTPSummaryTLSVersionParamsBotClassLikelyAutomated RadarHTTPSummaryTLSVersionParamsBotClass = "LIKELY_AUTOMATED"
	RadarHTTPSummaryTLSVersionParamsBotClassLikelyHuman     RadarHTTPSummaryTLSVersionParamsBotClass = "LIKELY_HUMAN"
)

type RadarHTTPSummaryTLSVersionParamsDateRange string

const (
	RadarHTTPSummaryTLSVersionParamsDateRange1d         RadarHTTPSummaryTLSVersionParamsDateRange = "1d"
	RadarHTTPSummaryTLSVersionParamsDateRange2d         RadarHTTPSummaryTLSVersionParamsDateRange = "2d"
	RadarHTTPSummaryTLSVersionParamsDateRange7d         RadarHTTPSummaryTLSVersionParamsDateRange = "7d"
	RadarHTTPSummaryTLSVersionParamsDateRange14d        RadarHTTPSummaryTLSVersionParamsDateRange = "14d"
	RadarHTTPSummaryTLSVersionParamsDateRange28d        RadarHTTPSummaryTLSVersionParamsDateRange = "28d"
	RadarHTTPSummaryTLSVersionParamsDateRange12w        RadarHTTPSummaryTLSVersionParamsDateRange = "12w"
	RadarHTTPSummaryTLSVersionParamsDateRange24w        RadarHTTPSummaryTLSVersionParamsDateRange = "24w"
	RadarHTTPSummaryTLSVersionParamsDateRange52w        RadarHTTPSummaryTLSVersionParamsDateRange = "52w"
	RadarHTTPSummaryTLSVersionParamsDateRange1dControl  RadarHTTPSummaryTLSVersionParamsDateRange = "1dControl"
	RadarHTTPSummaryTLSVersionParamsDateRange2dControl  RadarHTTPSummaryTLSVersionParamsDateRange = "2dControl"
	RadarHTTPSummaryTLSVersionParamsDateRange7dControl  RadarHTTPSummaryTLSVersionParamsDateRange = "7dControl"
	RadarHTTPSummaryTLSVersionParamsDateRange14dControl RadarHTTPSummaryTLSVersionParamsDateRange = "14dControl"
	RadarHTTPSummaryTLSVersionParamsDateRange28dControl RadarHTTPSummaryTLSVersionParamsDateRange = "28dControl"
	RadarHTTPSummaryTLSVersionParamsDateRange12wControl RadarHTTPSummaryTLSVersionParamsDateRange = "12wControl"
	RadarHTTPSummaryTLSVersionParamsDateRange24wControl RadarHTTPSummaryTLSVersionParamsDateRange = "24wControl"
)

type RadarHTTPSummaryTLSVersionParamsDeviceType string

const (
	RadarHTTPSummaryTLSVersionParamsDeviceTypeDesktop RadarHTTPSummaryTLSVersionParamsDeviceType = "DESKTOP"
	RadarHTTPSummaryTLSVersionParamsDeviceTypeMobile  RadarHTTPSummaryTLSVersionParamsDeviceType = "MOBILE"
	RadarHTTPSummaryTLSVersionParamsDeviceTypeOther   RadarHTTPSummaryTLSVersionParamsDeviceType = "OTHER"
)

// Format results are returned in.
type RadarHTTPSummaryTLSVersionParamsFormat string

const (
	RadarHTTPSummaryTLSVersionParamsFormatJson RadarHTTPSummaryTLSVersionParamsFormat = "JSON"
	RadarHTTPSummaryTLSVersionParamsFormatCsv  RadarHTTPSummaryTLSVersionParamsFormat = "CSV"
)

type RadarHTTPSummaryTLSVersionParamsHTTPProtocol string

const (
	RadarHTTPSummaryTLSVersionParamsHTTPProtocolHTTP  RadarHTTPSummaryTLSVersionParamsHTTPProtocol = "HTTP"
	RadarHTTPSummaryTLSVersionParamsHTTPProtocolHTTPS RadarHTTPSummaryTLSVersionParamsHTTPProtocol = "HTTPS"
)

type RadarHTTPSummaryTLSVersionParamsHTTPVersion string

const (
	RadarHTTPSummaryTLSVersionParamsHTTPVersionHttPv1 RadarHTTPSummaryTLSVersionParamsHTTPVersion = "HTTPv1"
	RadarHTTPSummaryTLSVersionParamsHTTPVersionHttPv2 RadarHTTPSummaryTLSVersionParamsHTTPVersion = "HTTPv2"
	RadarHTTPSummaryTLSVersionParamsHTTPVersionHttPv3 RadarHTTPSummaryTLSVersionParamsHTTPVersion = "HTTPv3"
)

type RadarHTTPSummaryTLSVersionParamsIPVersion string

const (
	RadarHTTPSummaryTLSVersionParamsIPVersionIPv4 RadarHTTPSummaryTLSVersionParamsIPVersion = "IPv4"
	RadarHTTPSummaryTLSVersionParamsIPVersionIPv6 RadarHTTPSummaryTLSVersionParamsIPVersion = "IPv6"
)

type RadarHTTPSummaryTLSVersionParamsO string

const (
	RadarHTTPSummaryTLSVersionParamsOWindows  RadarHTTPSummaryTLSVersionParamsO = "WINDOWS"
	RadarHTTPSummaryTLSVersionParamsOMacosx   RadarHTTPSummaryTLSVersionParamsO = "MACOSX"
	RadarHTTPSummaryTLSVersionParamsOIos      RadarHTTPSummaryTLSVersionParamsO = "IOS"
	RadarHTTPSummaryTLSVersionParamsOAndroid  RadarHTTPSummaryTLSVersionParamsO = "ANDROID"
	RadarHTTPSummaryTLSVersionParamsOChromeos RadarHTTPSummaryTLSVersionParamsO = "CHROMEOS"
	RadarHTTPSummaryTLSVersionParamsOLinux    RadarHTTPSummaryTLSVersionParamsO = "LINUX"
	RadarHTTPSummaryTLSVersionParamsOSmartTv  RadarHTTPSummaryTLSVersionParamsO = "SMART_TV"
)

type RadarHTTPSummaryTLSVersionResponseEnvelope struct {
	Result  RadarHTTPSummaryTLSVersionResponse             `json:"result,required"`
	Success bool                                           `json:"success,required"`
	JSON    radarHTTPSummaryTLSVersionResponseEnvelopeJSON `json:"-"`
}

// radarHTTPSummaryTLSVersionResponseEnvelopeJSON contains the JSON metadata for
// the struct [RadarHTTPSummaryTLSVersionResponseEnvelope]
type radarHTTPSummaryTLSVersionResponseEnvelopeJSON struct {
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *RadarHTTPSummaryTLSVersionResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}
