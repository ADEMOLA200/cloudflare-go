// File generated from our OpenAPI spec by Stainless.

package cloudflare

import (
	"context"
	"fmt"
	"net/http"

	"github.com/cloudflare/cloudflare-sdk-go/internal/apijson"
	"github.com/cloudflare/cloudflare-sdk-go/internal/param"
	"github.com/cloudflare/cloudflare-sdk-go/internal/requestconfig"
	"github.com/cloudflare/cloudflare-sdk-go/option"
)

// AIService contains methods and other services that help with interacting with
// the cloudflare API. Note, unlike clients, this service does not read variables
// from the environment automatically. You should not instantiate this service
// directly, and instead use the [NewAIService] method instead.
type AIService struct {
	Options []option.RequestOption
}

// NewAIService generates a new service that applies the given options to each
// request. These options are applied after the parent client's options (if there
// is one), and before any request-specific options.
func NewAIService(opts ...option.RequestOption) (r *AIService) {
	r = &AIService{}
	r.Options = opts
	return
}

// This endpoint provides users with the capability to run specific AI models
// on-demand.
//
// By submitting the required input data, users can receive real-time predictions
// or results generated by the chosen AI model. The endpoint supports various AI
// model types, ensuring flexibility and adaptability for diverse use cases.
func (r *AIService) RunModel(ctx context.Context, accountIdentifier string, modelName string, body AIRunModelParams, opts ...option.RequestOption) (res *AIRunModelResponse, err error) {
	opts = append(r.Options[:], opts...)
	var env AIRunModelResponseEnvelope
	path := fmt.Sprintf("accounts/%s/ai/run/%s", accountIdentifier, modelName)
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &env, opts...)
	if err != nil {
		return
	}
	res = &env.Result
	return
}

type AIRunModelResponse = interface{}

type AIRunModelParams struct {
	Body param.Field[interface{}] `json:"body,required"`
}

func (r AIRunModelParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r.Body)
}

type AIRunModelResponseEnvelope struct {
	Errors   []AIRunModelResponseEnvelopeErrors `json:"errors,required"`
	Messages []string                           `json:"messages,required"`
	Result   AIRunModelResponse                 `json:"result,required"`
	Success  bool                               `json:"success,required"`
	JSON     aiRunModelResponseEnvelopeJSON     `json:"-"`
}

// aiRunModelResponseEnvelopeJSON contains the JSON metadata for the struct
// [AIRunModelResponseEnvelope]
type aiRunModelResponseEnvelopeJSON struct {
	Errors      apijson.Field
	Messages    apijson.Field
	Result      apijson.Field
	Success     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AIRunModelResponseEnvelope) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

type AIRunModelResponseEnvelopeErrors struct {
	Message string                               `json:"message,required"`
	JSON    aiRunModelResponseEnvelopeErrorsJSON `json:"-"`
}

// aiRunModelResponseEnvelopeErrorsJSON contains the JSON metadata for the struct
// [AIRunModelResponseEnvelopeErrors]
type aiRunModelResponseEnvelopeErrorsJSON struct {
	Message     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *AIRunModelResponseEnvelopeErrors) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}
